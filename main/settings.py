"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DJANGO_DEBUG=(bool, False),
    DJANGO_SECRET_KEY=str,
    DJANGO_CORS_ORIGIN_REGEX_WHITELIST=(list, []),
    DJANGO_ALLOWED_HOST=(list, ["*"]),
    DJANGO_STATIC_ROOT=(str, os.path.join(BASE_DIR, "assets/static")),  # Where to store
    DJANGO_MEDIA_ROOT=(str, os.path.join(BASE_DIR, "assets/media")),  # Where to store
    DJANGO_STATIC_URL=(str, "/static/"),
    DJANGO_MEDIA_URL=(str, "/media/"),
    DJANGO_TIME_ZONE=(str, "UTC"),
    # Database
    DATABASE_NAME=str,
    DATABASE_USER=str,
    DATABASE_PASSWORD=str,
    DATABASE_HOST=str,
    DATABASE_PORT=int,
    # Redis
    CELERY_REDIS_URL=str,
    DJANGO_CACHE_REDIS_URL=str,
    # -- For running test (Optional)
    SENTRY_DSN=(str, None),
    SENTRY_TRACES_SAMPLE_RATE=(float, 0.2),
    SENTRY_PROFILE_SAMPLE_RATE=(float, 0.2),
    # App Domain
    # Vector Database
    QDRANT_DB_HOST=str,
    QDRANT_DB_PORT=int,
    QDRANT_DB_COLLECTION_NAME=str,
    # Embedding Model
    EMBEDDING_MODEL_URL=str,
    EMBEDDING_MODEL_NAME=str,
    EMBEDDING_MODEL_VECTOR_SIZE=int,
    EMBEDDING_MODEL_TYPE=int,
    OLLAMA_EMBEDDING_MODEL_BASE_URL=(str, None),
    # LLM Type
    LLM_TYPE=int,
    LLM_MODEL_NAME=str,
    LLM_OLLAMA_BASE_URL=(str, None),
    # OpenAI API key
    OPENAI_API_KEY=(str, None),
)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DJANGO_DEBUG")

ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOST")


# Note: The embedding model and vector size both should be compatible
# and chosen carefully
# If the embedding model is changed, we need to re-vectorize all the
# texts in the vector database

# Embedding Model selection
EMBEDDING_MODEL_TYPE = env("EMBEDDING_MODEL_TYPE")
EMBEDDING_MODEL_URL = env("EMBEDDING_MODEL_URL")
EMBEDDING_MODEL_NAME = env("EMBEDDING_MODEL_NAME")
EMBEDDING_MODEL_VECTOR_SIZE = env("EMBEDDING_MODEL_VECTOR_SIZE")
OLLAMA_EMBEDDING_MODEL_BASE_URL = env("OLLAMA_EMBEDDING_MODEL_BASE_URL")
# LLM selection
LLM_TYPE = env("LLM_TYPE")
LLM_MODEL_NAME = env("LLM_MODEL_NAME")
LLM_OLLAMA_BASE_URL = env("LLM_OLLAMA_BASE_URL")
# Qdrant database
QDRANT_DB_HOST = env("QDRANT_DB_HOST")
QDRANT_DB_PORT = env("QDRANT_DB_PORT")
QDRANT_DB_COLLECTION_NAME = env("QDRANT_DB_COLLECTION_NAME")
# OPENAI API KEY
OPENAI_API_KEY = env("OPENAI_API_KEY")

if EMBEDDING_MODEL_TYPE == 2 and not OLLAMA_EMBEDDING_MODEL_BASE_URL:
    raise ValueError("Ollama base url is not set.")

if (EMBEDDING_MODEL_TYPE == 3 or LLM_TYPE == 1) and not OPENAI_API_KEY:
    raise ValueError("OpenAI API key is not set.")

if LLM_TYPE == 2 and not LLM_OLLAMA_BASE_URL:
    raise ValueError("Ollama base url is not set.")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "user",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "main.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": env("DATABASE_HOST"),
        "PORT": env("DATABASE_PORT"),
        "NAME": env("DATABASE_NAME"),
        "USER": env("DATABASE_USER"),
        "PASSWORD": env("DATABASE_PASSWORD"),
        "OPTIONS": {"options": "-c search_path=public"},
    },
}

AUTH_USER_MODEL = "user.User"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = env("DJANGO_TIME_ZONE")

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = env("DJANGO_STATIC_URL")
MEDIA_URL = env("DJANGO_MEDIA_URL")
STATIC_ROOT = env("DJANGO_STATIC_ROOT")
MEDIA_ROOT = env("DJANGO_MEDIA_ROOT")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
